---
title: ""
format: 
  revealjs:
    theme: style_epa.scss
    chalkboard: TRUE
    width: "1400"
    slide-number: true
---

```{r setup, include=FALSE}
library(countdown)
```

# R Shiny{background-image="img/title_left.PNG" background-size="cover"}

::: {style="margin-top: 20px; font-size: 1em; color: black;"}
Getting the Most out of Shiny at EPA
:::

::: {style="margin-top: 20px; font-size: 0.5em; color: black;"}
EPA R User Workshop (October 18, 2023)

Andrew Murray<br>Office of Research and Development<br>
Contamination Analysis and Innovative Solutions Branch.
:::

## Materials{background-image="img/title_left.PNG" background-size="cover"}

[Download Course Materials](https://github.com/USEPA/R_Shiny_Workshop_2023)

https://github.com/USEPA/R_Shiny_Workshop_2023


- Download as a zaip file and unzip the folder to a directory you can easily access.

- Open the project in R Studio by double clicking the 'R_Shiny_Workshop_2023.Rproj' file or by navigating to this project file from RStudio

- If you Don't have RStudio installed, sign up for a Posit.cloud account:

https://posit.cloud/plans/free


## Workshop Overview{background-image="img/title_left.PNG" background-size="cover"}
:::: {.columns}

::: {.column width="33%"}
**Building Shiny Apps<br>(1:00 - 2:00)**

- What is Shiny?
- Flexdashboard
- A Basic Application
- Understanding Reactivity
- Efficient Coding
:::

::: {.column width="33%"}
**Advanced Functionality<br>(2:20 - 3:20)**

- Basic Layouts
- Crosstalk
- Generating Reports
:::

::: {.column width="33%"}
**Advanced Functionality & Deployment<br>(3:40 - 5:00)**
- Using Data from the Web
- POSIT Connect
- Deploying Your App
:::

::::

## What is Shiny?{background-image="img/title_left.PNG" background-size="cover"}

### TLDR:
Shiny allows you to deploy a web application that is capable of executing R code in real time.

### What does that mean?
This means that whoever is using a shiny app, can get information relevant to their needs and actually run analyses within the limits imposed by whoever wrote the application.

### Why should I use Shiny?
- Supercharge science communication (internally and externally)
- Increase collaboration
- Increased product value to the public
- Allows that code you worked so hard on to actually be used.

## When should I not use Shiny?{background-image="img/title_left.PNG" background-size="cover"}

:::: {.columns}
::: {.column width="30%"}

### Flex Dashboards

- Flex dashboards filter but don't execute.
- Can be beneficial when:
  - you are focused on customized subsets of data
 - code does not need to be executed
 - you want to be able to email the dashboard to someone
 
 
[Read more about flexdashboard here](https://posit.co/blog/flexdashboard-easy-interactive-dashboards-for-r/)
 
:::

::: {.column width="70%"}
![[flexdashboard example](https://jjallaire.shinyapps.io/shiny-ggplot2-diamonds/)](img/flexdashboard.png){width=70%}
:::
::::

## Shiny Implementations{background-image="img/body_top.PNG" background-size="cover"}

:::: {.columns}
::: {.column width="40%"}
Shiny is used for all sorts of applications:

- Mapping and Routing
- Data Visualization
- Automated Reports
- Surveys
- A lot more...

The best way to get inspired is to check out what others are doing:

[EPA POSIT Connect Server](https://rstudio-connect.dmap-stage.aws.epa.gov/connect/#/content/listing?filter=min_role:viewer&filter=content_type:all&view_type=compact)

[R Shiny Gallery](https://shiny.posit.co/r/gallery/)
:::

::: {.column width="60%"}
![An Example Shiny App](img/EJ_App.png){width=80%}
:::
::::

## A Basic Shiny App{background-image="img/body_top.PNG" background-size="cover"}

There are two basic components to every shiny app:

:::: {.columns}

::: {.column width="50%"}
- The User Interface

This is where we design the look and feel of the app

```{r, echo = TRUE, eval = FALSE}
# Define UI for application that shows a map
ui <- fluidPage(
  # Selector
  selectInput(
    inputId = "fCast",
    label = "Select a Forecast",
    choices = sf$fLabel,
    selected = sf$fLabel[1]),
  # Finished Map
  leafletOutput("map")
)
```
:::

::: {.column width="50%"}
- The Server

This is where the R code is executed

```{r, echo = TRUE, eval = FALSE}
# Define server logic required to render a map
server <- function(input, output) {

  # Filter the hurricane tracks
  sf.filt <- reactive(
    sf%>%
      filter(fLabel == input$fCast)
  )
  
  # Render the map
  output$map <- renderLeaflet(
    leaflet(sf.filt())%>%
      addTiles()%>%
      addPolygons())
}
```
:::
::::

## Components of the UI: Inputs{background-image="img/body_top.PNG" background-size="cover"}

:::: {.columns}

::: {.column width="40%"}
- The User Interface

This is where we design the look and feel of the app

```{r, echo = TRUE, eval = FALSE, 'code-line-numbers'="3-8"}
# Define UI for application that shows a map
ui <- fluidPage(
  # Selector
  selectInput(
    inputId = "fCast",
    label = "Select a Forecast",
    choices = sf$fLabel,
    selected = sf$fLabel[1]),
  # Finished Map
  leafletOutput("map")
)
```
:::

::: {.column width="60%"}

We are using a 'select' input which allows the user to select a single option.

We have defined our input with the following variables:

- `inputId` -- gives us an id to use later on when we write code
- `label` -- adds some text above the input
- `choices` -- the list the user can select from
- `selected` -- a default selection


Check out the [Shiny cheatsheet](https://shiny.posit.co/r/articles/start/cheatsheet/) for more input examples.

:::
::::


## Components of the UI: Outputs{background-image="img/body_top.PNG" background-size="cover"}

:::: {.columns}

::: {.column width="40%"}
- The User Interface

This is where we design the look and feel of the app

```{r, echo = TRUE, eval = FALSE, 'code-line-numbers'="9-10"}
# Define UI for application that shows a map
ui <- fluidPage(
  # Selector
  selectInput(
    inputId = "fCast",
    label = "Select a Forecast",
    choices = sf$fLabel,
    selected = sf$fLabel[1]),
  # Finished Map
  leafletOutput("map")
)
```
:::

::: {.column width="60%"}

Outputs have specific functions to make them viewable within the application. Here we are showing a leaflet app, so we use the `leafletOutput()` function. This partners with the render function: `renderLeaflet()` that lives in the server portion of our code.

Some common output types are:

- `dataTableOutput()`
- `plotOutput()`
- `imageOutput()`
- `textOutput()`

:::
::::

## The Server{background-image="img/body_top.PNG" background-size="cover"}

:::: {.columns}
::: {.column width="50%"}
```{r, echo = TRUE, eval = FALSE, 'code-line-numbers'="4-8|10-14"}
# Define server logic required to render a map
server <- function(input, output) {

  # Filter the hurricane tracks
  sf.filt <- reactive(
    sf%>%
      filter(fLabel == input$fCast)
  )
  
  # Render the map
  output$map <- renderLeaflet(
    leaflet(sf.filt())%>%
      addTiles()%>%
      addPolygons())
}
```
:::

::: {.column width="50%"}
The server portion of our app is doing two things

1. Creating a reactive sf object that is a filtered subset of our data based on our select input

2. Rendering a leaflet map using the reactive sf object and assigning it to an input that can be called in the user interface (UI)


Notice anything familiar from the UI?

:::
::::

## UI &#x2192; Server{background-image="img/title_left.PNG" background-size="cover"}

:::: {.columns}
::: {.column width="50%"}

UI

```{r, echo = TRUE, eval = FALSE, 'code-line-numbers'="5"}
# Define UI for application that shows a map
ui <- fluidPage(
  # Selector
  selectInput(
    inputId = "fCast",
    label = "Select a Forecast",
    choices = sf$fLabel,
    selected = sf$fLabel[1]),
  # Finished Map
  leafletOutput("map")
)
```

<div style="text-align: right"> `input$fCast` feeds into the server {{< fa arrow-right >}} </div>


:::

::: {.column width="50%"}

Server

```{r, echo = TRUE, eval = FALSE, 'code-line-numbers'="7"}
# Define server logic required to render a map
server <- function(input, output) {

  # Filter the hurricane tracks
  sf.filt <- reactive(
    sf%>%
      filter(fLabel == input$fCast)
  )
  
  # Render the map
  output$map <- renderLeaflet(
    leaflet(sf.filt())%>%
      addTiles()%>%
      addPolygons())
}
```
:::
::::

## UI &#x2190; Server{background-image="img/title_left.PNG" background-size="cover"}

:::: {.columns}
::: {.column width="50%"}

UI

```{r, echo = TRUE, eval = FALSE, 'code-line-numbers'="10"}
# Define UI for application that shows a map
ui <- fluidPage(
  # Selector
  selectInput(
    inputId = "fCast",
    label = "Select a Forecast",
    choices = sf$fLabel,
    selected = sf$fLabel[1]),
  # Finished Map
  leafletOutput("map")
)
```
<div style="text-align: right"> {{< fa arrow-up >}} `output$map` feeds into the server </div>

:::

::: {.column width="50%"}

Server

```{r, echo = TRUE, eval = FALSE, 'code-line-numbers'="11"}
# Define server logic required to render a map
server <- function(input, output) {

  # Filter the hurricane tracks
  sf.filt <- reactive(
    sf%>%
      filter(fLabel == input$fCast)
  )
  
  # Render the map
  output$map <- renderLeaflet(
    leaflet(sf.filt())%>%
      addTiles()%>%
      addPolygons())
}
```
:::
::::

## Reactive Expressions vs. Observers{background-image="img/title_left.PNG" background-size="cover"}

:::: {.columns}
::: {.column width="45%"}
Reactive Values are **lazy**

- Used to create something to be used somewhere else
  - Could be a text string, a data frame, an sf object etc...
  - Does not run until it has to
  - Typically used as a first step in whatever code you are running

:::

::: {.column width="10%"}
:::


::: {.column width="45%"}
Observers are **eager**

- The code inside an observer will run whenever **ANY** input inside of it is changed
- When the code runs, it will trigger any upstream reactive values
- Observers should be downstream of any large data to conserve computation time.
- Typically used to create outputs that are ready to be sent back to the UI for the end user to see.

:::
::::

## Reactive Expressions vs. Observers (Exercise){background-image="img/title_left.PNG" background-size="cover"}

:::: {.columns}
::: {.column width="80%"}

Navigate to the 'Apps' folder in the workshop repository and open the app called '02_reactive'

- This simple application loads the iris dataset and generates a plot
- Without changing any of the code run the app
  - Why is nothing showing up?
- Experiment with commenting out the reactive expression in the server part of the code and un-commenting the observer functions.
  - How does the functionality of the application change?
  
Try to re-write the code so that:

**A.** The iris data frame is filtered within an `eventReactive()` expression

**B.** A plot is displayed only when you click the 'Apply Filter' button. 

:::

::: {.column width="20%"}

![](https://media.giphy.com/media/LBsqN9KIwOrIx1CJ08/giphy.gif){width=100%}

```{r}
countdown(minutes = 5,
          warn_when = 30)
```
:::
::::

## Events{background-image="img/title_left.PNG" background-size="cover"}

There are two main variations of reactive and observe:

Reactivity:

- `reactive()`
- `eventReactive()`

Observer:

- `observe()`
- `observeEvent()`

observe and reactive will execute on their own. Adding the event, links it to a trigger. A trigger is most often a button but could be another reactive value or any type of input that changes.

## Efficient Coding{background-image="img/title_left.PNG" background-size="cover"}

:::: {.columns}

::: {.column width="50%"}

### Do:

- Load as much data on the front end as you can
- filter as quickly and efficiently as possible

### Don't:

- Repeatedly load or download redundant data
- Perform redundant operations

```{r}
countdown(minutes = 5,
          warn_when = 30,
          left = 50)
```

:::

::: {.column width="50%"}

### Exercise

Open the app.R file in the 'Apps/03_efficient_code/' folder.

This app loads county level polygons from the `tigris` package and generates two simple outputs.

- Run the application and review the code to understand how the app is calling the data.
- Notice that the `counties()` function is called every time the user changes the state in the dropdown menu.
- Try your hand at rewriting the code so that the data is downloaded only once and create an observer to update the output map and plot when the state selection is switched.

:::

::::

## Layouts{background-image="img/title_left.PNG" background-size="cover"}

:::: {.columns}
::: {.column width="20%"}

Shiny provides a number of pre-made layouts that can be almost infinitely customized. If you have experience with writing HTML, you could even write an entirely custom layout.

<br><br>

[Layout Guide](https://shiny.posit.co/r/articles/build/layout-guide/)
:::
::: {.column width="40%"}
![Sidebar](img/sidebar.png){width=80% fig-align="left"}


![Navlist](img/navlist.png){width=80% fig-align="left"}
:::
::: {.column width="40%"}
![Tabset](img/tabset.png){width=80% fig-align="left"}

![Grid](img/grid.png){width=80% fig-align="left"}

:::
::::

## Layouts: Example{background-image="img/title_left.PNG" background-size="cover"}

:::: {.columns}
::: {.column width="50%"}

```{r layout, echo = TRUE, eval = FALSE, 'code-line-numbers'="3,4,14,15,18"}
# Define UI for application that draws a histogram
ui <- fluidPage(
  titlePanel("Adding a Sidebar Layout"),
  sidebarPanel(
  selectInput("state","Select a State",
              choices = unique(sf$State),
              selected = "Ohio"),
  selectInput("x","Choose X Variable",
              choices = colnames(sf)[4:12],
              selected = "Med_House_Val"),
  selectInput("y","Choose y variable",
              choices = colnames(sf)[4:12],
              selected = "Population")
  ),
  mainPanel(
    plotOutput("plot"),
    leafletOutput("map")
  )
)
```

:::

::: {.column width="50%"}

### Open the App.R file in 'Apps/04_sidebar'

- Look at the UI section of the code to understand how the layout is set up
- Try to manipulate the layout of the application so that the plot and the map are side by side.

*hint: you'll want to use a fluidRow inside of the main panel with 2 columns.

check out the [Layout Guide](https://shiny.posit.co/r/articles/build/layout-guide/)

https://shiny.posit.co/r/articles/build/layout-guide/
:::

```{r}
countdown(minutes = 10,
          warn_when = 30,
          left = 50)
```

::::


## Crosstalk & Brushing{background-image="img/title_left.PNG" background-size="cover"}

:::: {.columns}
::: {.column width="50%"}

Widgets in Shiny can inform one one another (as we have seen) but they can also communicate back and forth. This is typically done using one of two methods:

**Brushing**

- Think of this as a one-way communication where interacting with one widget changes another.

**Crosstalk**

- Widgets are using a shared dataset, so if you change the data in one widget, it will change in every other widget linked to that data.

:::

::: {.column width="50%"}

### Brushing Example:

![source: Carson Sievert](https://talks.cpsievert.me/20191115/brushing-filtering.gif){width=90%}
:::
::::

## Brushing: Exercise{background-image="img/title_left.PNG" background-size="cover"}

:::: {.columns}

::: {.column width="40%"}

Here we use the brush options which are native to the shiny package.

We give the output plot an id within `brushOpts()` which in turn creates a new input.

That input can then be fed back to the server to subset the data in the plot to render a new map.

```{r brush1, echo = TRUE, eval = FALSE, 'code-line-numbers'="5-7"}
# From UI
  mainPanel(
    fluidRow(
      column(5,
             plotOutput("plot",
                        brush = brushOpts(
                          id = "plot_brush"))),
      column(7,
             leafletOutput("map"))
    )
  )
```

:::

::: {.column width="60%"}
```{r brush2, eval = FALSE, echo = TRUE, 'code-line-numbers'="3-5,17-19"}
# From Server
# Create subset of points to map
  sf.brushed <- reactive({
    brushedPoints(sf.filt(), input$plot_brush, xvar = input$x,yvar = input$y)
  })
  
  # Create a map and color by a selected column
  observe({
    # Get column we have selected to use as the color
    col.color <- st_drop_geometry(sf.brushed())[, paste(input$color)]
    
    # generate a color palette
    pal <- colorNumeric(
      palette = "Blues",
      domain = col.color)
    
    # Put color into the sf object
    sf.map <- sf.brushed()
    sf.map$color <- pal(col.color)
    
    # Create Map
    output$map <- renderLeaflet(
      leaflet(sf.map)%>%
        addTiles()%>%
        addPolygons(color = "#3c3d3c",stroke = TRUE,weight = 2,
                    fillColor = sf.map$color, fillOpacity = 1,
                    popup = paste0("<strong>",sf.map$County,"</strong><br>",
                                  "Population:",format(sf.map$Population,big.mark = ","),"<br>",
                                  "Median Home Value: $",format(sf.map$Med_House_Val,big.mark = ",")))%>%
        addLegend(pal = pal, values = col.color, title = input$color)
    )
  })
```

Open the App.R file in the folder 'Apps/05_brushing'
:::
::::

## Crosstalk{background-image="img/title_left.PNG" background-size="cover"}

Crosstalk is both more simple and more complicated than brushing depending on what your goal is.

The syntax can also be confusing while you learn how to use it.

### Server function modified for crosstalk

```{r crosstalk, echo = TRUE, eval = FALSE, 'code-line-numbers'="12-13|3-10"}
# Define server logic required to draw a histogram
server <- function(input, output) {
  # Get column numbers
  col.nums <- reactive(match(c(input$x,input$y,input$x2,input$y2),names(df)))
  # create a new data frame with selected variables
  df.sel <- reactive(
    df%>%
      select(col.nums())%>%
      setNames(c("X","Y","X2","Y2"))
  )
  
  # Create shared data frame
  shared.df <- SharedData$new(df.sel)
  
  # left Plot
  output$lplot <- renderD3scatter({
    d3scatter(shared.df, ~X,~Y, width = "100%")
  })
  
  # Right Plot
  output$rplot <- renderD3scatter({
    d3scatter(shared.df, ~X2,~Y2, width = "100%")
  })
}
```


## Generating Reports (In the App){background-image="img/title_left.PNG" background-size="cover"}

Generating reports from a shiny app is fairly straightforward once you understand how to pass data from an app to document script like RMarkdown or quarto.

This goes in the UI
```{r downloadButton, echo = TRUE, eval = FALSE}
downloadButton("report", "Generate report")
```

This goes in the server
```{r downloadserver, echo = TRUE, eval = FALSE}
output$report <- downloadHandler(
        # For PDF output, change this to "report.pdf"
        filename = "report.html",
        content = function(file) {
            # Copy the report file to a temporary directory before processing it, in
            # case we don't have write permissions to the current working dir (which
            # can happen when deployed).
            tempReport <- file.path(tempdir(), "report.Rmd")
            file.copy("report.Rmd", tempReport, overwrite = TRUE)

            # Knit the document, passing in the `params` list, and eval it in a
            # child of the global environment (this isolates the code in the document
            # from the code in this app).
            rmarkdown::render(tempReport, output_file = file,
                              params = list(IDs = reportRows(),Lusts = reportReleases()),
                              envir = new.env(parent = globalenv())
            )
        }
    )
```

## Generating Reports (In the Document){background-image="img/title_left.PNG" background-size="cover"}

:::: {.columns}
::: {.column width="50%"}
In this example, the shiny app is filtering down a data frame based on selections made by the end user. When the user clicks the generate report button, two tables are then passed to .Rmd file. The file knows to accept those tables based on the parameters in the header.

Take a few minutes to understand how the app is handling the data and make sure you can generate a report

- Can you change the server side code to give the file a more relevant name?
- Try manipulating the .Rmd document to add a feature or change the behavior of the current features.

:::

::: {.column width="50%"}

The shiny app creates parameters which it passes to a document in a separate script in the same directory

You write your document just as you normally would with one main difference
```{r docside, eval = FALSE, echo = TRUE}
---
title: "Report for Selected Communities"
output: html_document
params:
  IDs: NA
  Lusts: NA
---
# Selected Block Groups
blkGrps <- as.data.frame(params$IDs)
releases <- as.data.frame(params$Lusts)
```

Open the App.R and the .Rmd files in the 'Apps/07_reports' folder

```{r}
countdown(minutes = 10,
          warn_when = 30)
```

:::


::::



## Fetching Data from an API{background-image="img/title_left.PNG" background-size="cover"}
Updating data can vary based on your needs

:::: {.columns}
::: {.column width="50%"}
- Census data every year?
- SDWA data every quarter?
- ECHO data every week?
- Flood warnings every day?
- Precipitation data every 4 hours?

You could...
- fetch data every time your app loads from the internet
- run a script every day that updates the data your shiny app uses
- do it manually when you need to
- If you can find it on the internet, you can almost always access it from an R session.
:::

::: {.column width="50%"}
Using an API (ECHO)

Many r packages we use often are simply functions that call an API, basically a web based data delivery system. Not all data we use has a nice package but it's not too difficult to write your own function.

```{r api, echo = TRUE, eval = FALSE}
# Build url to get Query ID
print("Getting Query ID for selected Area...")
url <- paste0("https://echodata.epa.gov/echo/echo_rest_services.get_facilities?output=JSON&p_c1lat=",
                bb[4],"&p_c1lon=",bb[1],"&p_c2lat=",bb[2],"&p_c2lon=",bb[3])
  
# Get Query ID
res <- GET(url)
data <- fromJSON(rawToChar(res$content))
qid <- data$Results$QueryID
  
# Use QID to pull facility data
print("Downloading Facility Data...")
gres <- GET(paste0("https://echodata.epa.gov/echo/echo_rest_services.get_geojson?qid=",qid))
gdata <- fromJSON(rawToChar(gres$content))
```


:::
::::


## Fetching Data from a feature Service{background-image="img/title_left.PNG" background-size="cover"}

:::: {.columns}
::: {.column width="50%"}
Another way to get data is from ArcGIS Online, which many agencies (including us) use to host a lot of spatial data...

You can query a public feature service from ArcGIS directly into R

- No ArcGIS license required
- No ArcGIS binding required
:::

::: {.column width="50%"}
```{r featureService, eval=FALSE, echo=TRUE}
# Download USTFinder Data
# Facilities
url0 <- parse_url("https://services.arcgis.com/cJ9YHowT8TU7DUyn/arcgis/rest/services")
url0$path <- paste(url0$path, "UST_Finder_Feature_Layer_2/FeatureServer/0/query", sep = "/")
url0$query <- list(geometryType="esriGeometryEnvelope",
                   geometry=bbStr,
                   outFields = "*",
                   returnGeometry = "true",
                   f = "geojson")
request0 <- build_url(url0)

fac <- st_read(request0)
```

:::
::::

## Deploying to POSIT Connect{background-image="img/title_left.PNG" background-size="cover"}

:::: {.columns}
::: {.column width="50%"}
![](img/connectflow.png)
:::

::: {.column width="50%"}
- **Cannot** directly publish to production servers
- **Can** publish to a staging server & share internally
- After a thorough review, the R users can then request that their apps be promoted to a production server.
- Can request a vanity URL and any other parameters to be set on the app such as run schedule.
- You need to request a publisher role (Agency has 200)
- Any EPA user can view with EPA login (VPN required)
:::
::::

## Pins{background-image="img/title_left.PNG" background-size="cover"}

:::: {.columns}
::: {.column width="80%"}
### Handling data generated from a shiny application can be tricky...

- When a Shiny app runs, it runs in an isolated environment and does not save data.
  - When you generate a report, that report goes straight to you and is **not** saved on the server.
  - This can complicate things if you are collaborating with others or want to save the results of an analysis to be recycled into your app at a later time.
  
  Pins is a package that allows you to read and write data items to POSIT Connect.
  - This can be basically any r object like data frames, models, scripts etc...
  
  While this may seem basic, it is incredibly powerful
  
  It's also not quite working yet at EPA...
:::
::: {.column width="20%"}
![](img/pins.png)
:::

::::


## Resources{background-image="img/title_left.PNG" background-size="cover"}

Thanks for Joining!

:::: {.columns}
::: {.column width="30%"}
![](https://media4.giphy.com/media/26u4lOMA8JKSnL9Uk/200.webp?cid=ecf05e477y7kupexmnxjedygthgqd1j7youtxolkce6hmvap&ep=v1_gifs_search&rid=200.webp&ct=g)

More Questions?

Murray.AndrewR@epa.gov
:::

::: {.column width="70%"}
[Mastering Shiny (Free Online Book)](https://mastering-shiny.org/)

[R Shiny Cheatsheet](https://shiny.posit.co/r/articles/start/cheatsheet/)

[Crosstalk](https://rstudio.github.io/crosstalk/)

[Brushing (slide deck)](https://talks.cpsievert.me/20191115/#1)

[Pins](https://pins.rstudio.com/)

[EPA Connect Server](https://rstudio-connect.dmap-stage.aws.epa.gov/connect/#/content/listing?filter=min_role:viewer&filter=content_type:all&view_type=compact)

:::
::::
